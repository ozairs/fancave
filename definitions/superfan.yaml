paths:
  /team:
    post:
      tags:
        - Team
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Team.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Team'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Team'
      deprecated: false
    patch:
      tags:
        - Team
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Team.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Team'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Team'
      deprecated: false
    put:
      tags:
        - Team
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Team.replaceOrCreate__put_team
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Team'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Team'
      deprecated: false
    get:
      tags:
        - Team
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Team.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Team'
      deprecated: false
  /team/replaceOrCreate:
    post:
      tags:
        - Team
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Team.replaceOrCreate__post_team_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Team'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Team'
      deprecated: false
  /team/upsertWithWhere:
    post:
      tags:
        - Team
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Team.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Team'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Team'
      deprecated: false
  '/team/{id}/exists':
    get:
      tags:
        - Team
      summary: Check whether a model instance exists in the data source.
      operationId: 'Team.exists__get_team_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/team/{id}':
    head:
      tags:
        - Team
      summary: Check whether a model instance exists in the data source.
      operationId: 'Team.exists__head_team_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Team
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Team.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Team'
      deprecated: false
    put:
      tags:
        - Team
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Team.replaceById__put_team_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Team'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Team'
      deprecated: false
    delete:
      tags:
        - Team
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Team.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Team
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Team.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Team'
        - name: id
          in: path
          description: Team id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Team'
      deprecated: false
  '/team/{id}/replace':
    post:
      tags:
        - Team
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Team.replaceById__post_team_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Team'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Team'
      deprecated: false
  /team/findOne:
    get:
      tags:
        - Team
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Team.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Team'
      deprecated: false
  /team/update:
    post:
      tags:
        - Team
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Team.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Team'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /team/count:
    get:
      tags:
        - Team
      summary: Count instances of the model matched by where from the data source.
      operationId: Team.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /team/scores:
    get:
      tags:
        - Team
      summary: ''
      operationId: Team.getScores
      parameters:
        - name: team
          in: query
          description: ''
          required: true
          type: string
        - name: league
          in: query
          description: ''
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  /player:
    post:
      tags:
        - Player
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Player.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Player'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
    patch:
      tags:
        - Player
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Player.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Player'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
    put:
      tags:
        - Player
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Player.replaceOrCreate__put_player
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Player'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
    get:
      tags:
        - Player
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Player.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Player'
      deprecated: false
  /player/replaceOrCreate:
    post:
      tags:
        - Player
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Player.replaceOrCreate__post_player_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Player'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
  /player/upsertWithWhere:
    post:
      tags:
        - Player
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Player.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Player'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
  '/player/{id}/exists':
    get:
      tags:
        - Player
      summary: Check whether a model instance exists in the data source.
      operationId: 'Player.exists__get_player_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/player/{id}':
    head:
      tags:
        - Player
      summary: Check whether a model instance exists in the data source.
      operationId: 'Player.exists__head_player_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Player
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Player.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
    put:
      tags:
        - Player
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Player.replaceById__put_player_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Player'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
    delete:
      tags:
        - Player
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Player.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Player
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Player.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Player'
        - name: id
          in: path
          description: Player id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
  '/player/{id}/replace':
    post:
      tags:
        - Player
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Player.replaceById__post_player_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Player'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
  /player/findOne:
    get:
      tags:
        - Player
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Player.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Player'
      deprecated: false
  /player/update:
    post:
      tags:
        - Player
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Player.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Player'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /player/count:
    get:
      tags:
        - Player
      summary: Count instances of the model matched by where from the data source.
      operationId: Player.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /y/news:
    get:
      tags:
        - News
      operationId: News.getNews__get_y_news
      parameters:
        - in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              undefined:
                type: object
      deprecated: false
definitions:
  Team:
    properties:
      arena:
        type: string
      city:
        type: string
      coach:
        type: string
      description:
        type: number
        format: double
      league:
        type: string
      logo:
        type: string
      name:
        type: string
      id:
        type: number
        format: double
    additionalProperties: false
  x-any:
    properties: {}
  Player:
    properties:
      name:
        type: string
      position:
        type: string
      team:
        type: string
      school:
        type: string
      birthplace:
        type: string
      picture:
        type: string
      id:
        type: number
        format: double
    additionalProperties: false
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: superfan
  version: 1.0.0
  title: superfan
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
